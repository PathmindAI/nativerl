def SLACK_URL = "https://hooks.slack.com/services/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"
def icon = ":heavy_check_mark:"
/*
    nativerl pipeline
    The pipeline is made up of following steps
    1. Git clone and setup
    2. Build and s3 push
    4. Optionally deploy to production and test
 */

/*
    Build a docker image
*/
def buildNativerl(image_name) {
    echo "Building the nativerl Docker Image"
    sh """
        set +x
        docker image ls | grep ${image_name} | awk '{print \$3}' | xargs -I {} docker rmi {} -f
        docker build -t ${image_name} -f ${WORKSPACE}/Dockerfile ${WORKSPACE}/
    """
    echo "Building nativerl"
    sh "docker run --mount \"src=${WORKSPACE},target=/app,type=bind\" nativerl mvn clean install -Djavacpp.platform=linux-x86_64"
    sh "aws s3 cp ${WORKSPACE}/nativerl/target/nativerl-1.8.1-SNAPSHOT-bin.zip s3://dev-training-static-files.pathmind.com/nativerl/pr_test/nativerl-1.8.1-SNAPSHOT-bin.zip"
    sh "aws s3 sync ${WORKSPACE}/nativerl/pr_test/ s3://nativerl-training-dynamic-files.pathmind.com/id${env.BUILD_NUMBER}/"
}

/*
    Build the conda package
*/
def buildRllibpack(image_name) {
    echo "Building the rllibpack Docker Image for branch ${env.BRANCH_NAME}"
    sh """
        set +x
        docker image ls | grep rllibpack | awk '{print \$3}' | xargs -I {} docker rmi {} -f
        docker build -t ${image_name} -f ${WORKSPACE}/rllibpack/Dockerfile ${WORKSPACE}/rllibpack/
    """
    h "docker run -v ${WORKSPACE}/rllibpack/out:/home/rllibpack/out/ rllibpack"
    sh "aws s3 cp ${WORKSPACE}/rllibpack/out/rllibpack.tar.gz s3://slin-training-dynamic-files.pathmind.com/test/conda/1_3_0/rllibpack.tar.gz"
}

/*
    Build MA docker image
*/
def buildMADockerImage(image_name, docker_tag) {
        echo "Building the Model Analyzer Docker Image"
        //Dont quit if there is an error
        sh """
            set +x
            docker image ls | grep ${image_name} | awk '{print \$3}' | xargs -I {} docker rmi {} -f
            docker build -t ${image_name} \
                -f ${WORKSPACE}/nativerl-analyzer/Dockerfile \
                --build-arg S3BUCKET='${docker_tag}-training-static-files.pathmind.com' \
                --build-arg AWS_ACCESS_KEY_ID=`kubectl get secret awsaccesskey -o=jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode` \
                --build-arg AWS_SECRET_ACCESS_KEY=`kubectl get secret awssecretaccesskey -o=jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode` ${WORKSPACE}/nativerl-analyzer/ \
                --build-arg NATIVERL_FOLDER='nativerl/pr_test'
        """
}

/*
    This is the main pipeline section with the stages of the CI/CD
 */
pipeline {

    options {
        // Build auto timeout 4 days
        timeout(time: 5760, unit: 'MINUTES')
    }

    // Some global default variables
    environment {
        IMAGE_NAME = 'nativerl'
        DEPLOY_PROD = false
    }

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'test', description: 'Git branch to build')
        booleanParam(name: 'DEPLOY_TO_PROD', defaultValue: false, description: 'If build and tests are good, proceed and deploy to production without manual approval')

    }

    //all is built and run from the master
    agent {
        node {
            label 'master'
            customWorkspace "nativerl_${env.BUILD_NUMBER}"
        }
    }

    // Pipeline stages
    stages {
        stage('Initialize') {
            steps {
                buildDescription "#${ghprbPullId} - ${env.ghprbPullTitle}"
            }
        }
        stage('Git clone and setup') {
            steps {
                echo "Notifying slack"
                sh "set +x; curl -X POST -H 'Content-type: application/json' --data '{\"text\":\":building_construction: Starting Nativerl Jenkins Job\n#${ghprbPullId} - ${env.ghprbPullTitle}\nUrl: ${env.RUN_DISPLAY_URL}\"}' ${SLACK_URL}"
                echo "Check out code"
                checkout scm
            }
        }

        stage('Build Docker Images') {
            stages {
        stage('Build') {
                    parallel {
                        stage('Build rllibpack') {
                    steps {
                buildRllibpack("rllibpack")
                }
            }
            stage('Build nativerl image') {
                steps {
                buildNativerl("${IMAGE_NAME}")
                }
                        }
            }
        }
                stage('Build Model Analyzer image') {
                    steps {
                        buildMADockerImage("${IMAGE_NAME}-ma", "dev")
                    }
                }
            }
        }

        stage('Start training') {
            parallel {
                stage('Start Training') {
                    steps {
                        script{
                            sh "aws sqs send-message --queue-url https://queue.amazonaws.com/839270835622/dev-training-queue.fifo --message-body \"{\\\"S3Bucket\\\": \\\"nativerl-training-dynamic-files.pathmind.com\\\",\\\"S3Path\\\":\\\"id${env.BUILD_NUMBER}\\\"}\" --message-group-id training"
                            echo "Waiting for the training to start"
                            sh "timeout 900 bash -c 'while ! kubectl get pods -n dev | grep '^id${env.BUILD_NUMBER}-'; do sleep 60; done'"
                            echo "Waiting for the training to finish"
                            sh "bash -c 'while kubectl get pods -n dev | grep '^id${env.BUILD_NUMBER}-'; do sleep 60; done'"
                            TEST_STATUS = sh(returnStatus: true, script: "aws s3 ls s3://nativerl-training-dynamic-files.pathmind.com/id${env.BUILD_NUMBER}/output/errors.log  | awk '{print \$3}' | grep  '^0\$'")
                            /*if (TEST_STATUS != 0) {
                                currentBuild.result = 'UNSTABLE'
                            }*/
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Deleting workspace'
            deleteDir()

            echo 'Notifying Slack'
            script {
                if (currentBuild.result != "SUCCESS") {
                    icon = ":x:"
                }
            }
            echo "Stop training"
            sh "aws sqs send-message --queue-url https://queue.amazonaws.com/839270835622/dev-training-queue.fifo --message-body \"{\\\"S3Bucket\\\": \\\"nativerl-training-dynamic-files.pathmind.com\\\",\\\"S3Path\\\":\\\"id${env.BUILD_NUMBER}\\\", \\\"destroy\\\":\\\"1\\\"}\" --message-group-id training"
            echo "Notifying slack"
            sh "set +x; curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"${icon} Nativerl Jenkins Job Finished\n#${ghprbPullId} - ${env.ghprbPullTitle}\nUrl: ${env.RUN_DISPLAY_URL}\nResults: https://s3.console.aws.amazon.com/s3/buckets/nativerl-training-dynamic-files.pathmind.com/id${env.BUILD_NUMBER}/\nStatus: ${currentBuild.result}\"}' ${SLACK_URL}"
        }
    }
}
