{{#if packageName}}package {{packageName}};{{/if}}
import com.anylogic.engine.Engine;
import pathmind.policyhelper.PathmindHelper;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.*;

import io.skymind.pathmind.analyzer.api.dto.SimulationParameter;
{{#if simulationClassName}}import {{simulationClassName}};{{/if}}

public class ModelAnalyzer {
    private static String display(String[] theStrings) {
        return Stream.of(theStrings).collect(Collectors.joining("|"));
    }
    public static void main(String[] args) throws Throwable {
        System.setProperty("ai.skymind.nativerl.disablePolicyHelper", "true");

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        List<String> failedSteps = new ArrayList<>();
        Engine engine;
        {{agentClassName}} agent;

        try {
            {{simulationClassName}} exp = new {{simulationClassName}}();
{{#if isRLExperiment}}
            agent = exp.createModel();
            engine = agent.getEngine();
{{else}}
            engine = new Training(null).createEngine();
            exp.setupEngine(engine);
            exp.initDefaultRandomNumberGenerator(engine);
            agent = new {{agentClassName}}(engine, null, null);
{{/if}}
        } catch(RuntimeException e) {
            if (e.getCause() instanceof ClassNotFoundException) {
                System.out.println("oldVersionFound:true");
                System.exit(0);
                return;
            }
            else {
                e.printStackTrace(System.out);
                System.exit(1);
                return;
            }
        }

        agent.setParametersToDefaultValues();

        AtomicInteger index = new AtomicInteger();
        List<SimulationParameter> simulationParameters = Arrays.stream(agent.getParameterNames())
                .map(p -> {
                    String key = p;
                    Object value = agent.getParameter(p);
                    Integer type = getType(value);
                    return new SimulationParameter(index.getAndIncrement(), key, value == null ? "NULL_VALUE" : value.toString(), type);
                })
                .collect(Collectors.toList());

        if (!simulationParameters.isEmpty()) {
            System.out.println("agentParams:" + objectMapper.writeValueAsString(simulationParameters));
        }

        try {
            engine.start(agent);
        } catch (Throwable ex) {
            ex.printStackTrace(System.out);
            failedSteps.add("startEngine");
        }

        PathmindHelper helper = agent.{{pathmindHelperClassName}};

        try {
            System.out.println("observations:" + helper.observationForTraining().length);
            System.out.println("observationNames:" + display(helper.getObservationNames()));
            System.out.println("observationTypes:" + display(helper.getObservationTypes()));
        } catch (Throwable ex) {
             System.out.println("Cannot get obs:");
             ex.printStackTrace(System.out);
             failedSteps.add("observations");
             System.out.println("observations:" + 0);
             System.out.println("observationsNames:");
        }

        // actions is here just to keep backward compatibility. When we remove support from webapp, we can remove it.
        System.out.println("actions:" + helper.getPossibleActionCount());
        boolean[] actionMasks = helper.actionMask();
        System.out.println("isActionMask:" + (actionMasks != null && actionMasks.length > 0));
        System.out.println("rewardVariablesCount:" + helper.observationForReward().length);
        System.out.println("rewardVariableNames:" + display(helper.getRewardVariableNames()));
        System.out.println("rewardVariableTypes:" + display(helper.getRewardVariableTypes()));

        // check number of agent
        System.out.println("agents:" + helper.numberOfAgents);
        //System.out.println("model-analyzer-mode:" + (helper.numberOfAgents > 1 ? "al_multi" : "al_single"));
        //this is for temporary roll back for support staging and dev server again
        System.out.println("model-analyzer-mode:" + (helper.numberOfAgents > 1 ? "multi" : "single"));

        try {
            if (helper.isEnabled) {
                System.out.println("isEnabled:true");
            } else {
                System.out.println("isEnabled:false");
                failedSteps.add("pathmindHelperDisabled");
            }
        } catch (Throwable ex) {
            System.out.println("Cannot get isEnabled:");
            ex.printStackTrace(System.out);
            failedSteps.add("pathmindHelperDisabled");
        }

        System.out.println("reward: not defined");
        System.out.println("failedSteps:" + String.join(",", failedSteps));

        System.exit(0);
    }

    private static Integer getType(Object value) {
        Integer type = 4;
        if (value != null) {
            Class klass = value.getClass();
            if (klass == java.lang.Boolean.class) {
                type = 0;
            } else if (klass == java.lang.Integer.class) {
                type = 1;
            } else if (klass == java.lang.Double.class) {
                type = 2;
            } else if (klass == java.lang.String.class) {
                type = 3;
            } else if (klass == java.util.Date.class) {
                type = 5;
            }
        }
        return type;
    }
}
