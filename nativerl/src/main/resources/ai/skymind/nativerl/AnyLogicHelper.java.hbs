{{#if packageName}}package {{packageName}};{{/if}}
import ai.skymind.nativerl.*;
import com.anylogic.engine.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import pathmind.policyhelper.PathmindHelperRegistry;
{{#if simulationClassName}}import {{simulationClassName}};{{/if}}

public class {{className}} extends AbstractEnvironment {
{{#unless isRLExperiment}}
    final static Training experiment = new Training(null);
{{/unless}}
    protected Engine engine;
    protected {{agentClassName}} agent;
    protected PolicyHelper policyHelper;
    protected ObservationFilter observationFilter;
    protected Object[] rewardBefore, rewardAfter;
    {{{classSnippet}}}
    public {{className}}() {
        System.setProperty("ai.skymind.nativerl.disablePolicyHelper", "true");
        this.observationFilter = new PolicyObservationFilter();
        try {
            reset();
        } catch (Exception exception) {
            printExperimentErrorStackTrace(exception);
        }
    }

    public {{className}}(PolicyHelper policyHelper) {
        this.policyHelper = policyHelper;
        this.observationFilter = new PolicyObservationFilter();
        try {
            reset();
        } catch (Exception exception) {
            printExperimentErrorStackTrace(exception);
        }
    }

    @Override
    public void close() {
        super.close();
        // Destroy the model:
        engine.stop();
    }

    @Override
    public Array getObservation(long agentId) {
        Object in = PathmindHelperRegistry.getHelper().getObservationObject((int)agentId);
        double[] out = observationFilter.filter(in);

        if (out == null) {
            out = PathmindHelperRegistry.getHelper().observationToDoubles(in);
        }
        if (this.observation == null || this.observation.length() != out.length) {
            this.observation = new Array(new SSizeTVector().put(out.length));
        }
        float[] array = new float[(int)observation.length()];
        for (int i = 0; i < array.length; i++) {
            array[i] = i < out.length ? (float)out[i] : 0;
        }
        observation.data().put(array);
        return observation;
    }

    @Override
    public Array getActionMask(long agentId) {
        boolean[] mask = PathmindHelperRegistry.getHelper().actionMask((int)agentId);
        float[] array = new float[(int)actionMask.length()];
        for (int i = 0; i < array.length; i++) {
            array[i] = i < mask.length && mask[i] ? 1.0f : 0.0f;
        }
        actionMask.data().put(array);
        return actionMask;
    }

    @Override
    public boolean isSkip(long agentId) {
        return PathmindHelperRegistry.getHelper().isSkip((int)agentId);
    }

    @Override
    public boolean isDone(long agentId) {
        return PathmindHelperRegistry.getHelper().isDone((int)agentId);
    }

    @Override
    public void reset() {
        if (engine != null) {
            engine.stop();
        }
        {{simulationClassName}} exp = new {{simulationClassName}}();
{{#if isRLExperiment}}
    {{#if isPLE}}
        agent = exp.createModel();
        agent.setParametersToDefaultValues();
        engine = agent.getEngine();
    {{else}}
        // Create Engine, initialize random number generator:
        engine = experiment.createEngine();
        exp.setupEngine_xjal(engine);
        exp.initDefaultRandomNumberGenerator(engine);
        // Create new agent object:
        agent = new {{agentClassName}}(engine, null, null);
        agent.setParametersToDefaultValues();
    {{/if}}
{{else}}
        // Create Engine, initialize random number generator:
        engine = experiment.createEngine();
        exp.setupEngine(engine);
        exp.initDefaultRandomNumberGenerator(engine);
        // Create new agent object:
        agent = new {{agentClassName}}(engine, null, null);
        agent.setParametersToDefaultValues();
{{/if}}

        PathmindHelperRegistry.setForceLoadPolicy(policyHelper);
        {{{resetSnippet}}}
        engine.start(agent);

        int n = (int)getNumberOfAgents();
        if (rewardBefore == null || rewardBefore.length != n) {
            rewardBefore = new Object[n];
        }
        if (rewardAfter == null || rewardAfter.length != n) {
            rewardAfter = new Object[n];
        }

        // Workaround to trigger all events at time 0.0
        while (engine.getNextEventTime() == 0.0) {
            if (!engine.runFast(Math.ulp(0.0))) {
                if (engine.getState() == Engine.State.ERROR) {
                    throw new RuntimeException("Engine error at time " + engine.time());
                }
                break;
            }
        }

        try {
            // Initialize variables from parent class
            init(agent);
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
            throw new RuntimeException("Could not initialize environment.");
        }
    }

    @Override
    public long getNumberOfAgents() {
        return PathmindHelperRegistry.getHelper().numberOfAgents;
    }

    @Override
    public void setNextAction(Array action, long agentId) {
        rewardBefore[(int)agentId] = PathmindHelperRegistry.getHelper().getRewardObject((int)agentId);
        double[] array = new double[(int)action.length()];
        for (int i = 0; i < array.length; i++) {
            array[i] = action.data().get(i);
        }
        // the learning framework should give us continuous values in the range [0, 1] here
        PathmindHelperRegistry.getHelper().action[(int)agentId] = PathmindHelperRegistry.getHelper().doAction(array, true, (int)agentId);
    }

    @Override
    public void step() {
        try {
            engine.runFast();
        } catch (Exception exception) {
            printExperimentErrorStackTrace(exception);
        }
        if (engine.getState() == Engine.State.ERROR) {
            throw new RuntimeException("Engine error at time " + engine.time());
        }

        // Workaround to trigger all events at current time
        double time = engine.time();
        while (engine.getNextEventTime() == time) {
            if (!engine.runFast(time + Math.ulp(time))) {
                if (engine.getState() == Engine.State.ERROR) {
                    throw new RuntimeException("Engine error at time " + engine.time());
                }
                break;
            }
        }
    }

    @Override
    public float getReward(long agentId) {
        double reward = 0;
        rewardAfter[(int)agentId] = PathmindHelperRegistry.getHelper().getRewardObject((int)agentId);
{{#if namedVariables}}
        {{rewardClassName}} before = rewardBefore[(int)agentId] != null ? PolicyObservationFilter.workAroundJavaBug(rewardBefore[(int)agentId]) : null,
                             after = rewardAfter[(int)agentId] != null ? PolicyObservationFilter.workAroundJavaBug(rewardAfter[(int)agentId]) : null;
{{else}}
        double[] before = rewardBefore[(int)agentId] != null ? PathmindHelperRegistry.getHelper().rewardToDoubles(rewardBefore[(int)agentId]) : null;
        double[] after = rewardAfter[(int)agentId] != null ? PathmindHelperRegistry.getHelper().rewardToDoubles(rewardAfter[(int)agentId]) : null;
{{/if}}

        if (before == null) {
            // Do nothing, return 0 because before doesn't exist at step 0
        } else {
            {{{rewardSnippet}}}
        }

        return (float)reward;
    }

    @Override
    public Array getMetrics(long agentId) {
        double[] metrics = null;
        {{{metricsSnippet}}}
        if (metrics == null) {
            if (rewardAfter[(int)agentId] == null) {
                rewardAfter[(int)agentId] = PathmindHelperRegistry.getHelper().getRewardObject((int)agentId);
            }
            metrics = PathmindHelperRegistry.getHelper().rewardToDoubles(rewardAfter[(int)agentId]);
        }

        if (this.metrics == null || this.metrics.length() != metrics.length) {
            this.metrics = new Array(new SSizeTVector().put(metrics.length));
        }
        float[] array2 = new float[metrics.length];
        for (int i = 0; i < metrics.length; i++) {
            array2[i] = (float)metrics[i];
        }
        this.metrics.data().put(array2);
        return this.metrics;
    }

    public double[][] test() {
        int n = (int)getNumberOfAgents();
        double[][] allMetrics = new double[n][];
        reset();
        while (!isDone(-1)) {
            engine.runFast();
        }
        for (int i = 0; i < n; i++) {
            double[] metrics = null;
            {{{metricsSnippet}}}
            if (metrics == null) {
                rewardAfter[i] = PathmindHelperRegistry.getHelper().getRewardObject(i);
                metrics = PathmindHelperRegistry.getHelper().rewardToDoubles(rewardAfter[i]);
            }
            allMetrics[i] = metrics;
        }
        return allMetrics;
    }

    public static void main(String[] args) throws Exception {
        ArrayList<String> lines = new ArrayList<String>({{testIterations}});
        {{~#if policyHelper}}
        {{className}} e = new {{className}}(PolicyHelper.load(new File(args[0])));
        for (int i = 0; i < {{testIterations}}; i++) {
            lines.add(Arrays.deepToString(e.test()));
        }
        {{~/if}}
        Files.write(Paths.get(args[0], "metrics.txt"), lines, Charset.defaultCharset());
    }

    public static void printExperimentErrorStackTrace(Exception exception) {
        String filename = "ExperimentErrorStackTrace.txt";
        try (PrintWriter pw = new PrintWriter(new FileOutputStream(new File("{{escapePath outputDir}}/{{algorithm}}", filename), true))) {
            exception.printStackTrace(pw);
        } catch (FileNotFoundException e) {
            exception.printStackTrace();
            e.printStackTrace();
        }
    }
}

{{#unless isRLExperiment}}
class Training extends ExperimentCustom {
    @AnyLogicInternalCodegenAPI
    public static String[] COMMAND_LINE_ARGUMENTS_xjal = new String[0];

    public Training(Object parentExperiment) {
        super(parentExperiment);
        this.setCommandLineArguments_xjal(COMMAND_LINE_ARGUMENTS_xjal);
    }

    public void run() {
    }

    @AnyLogicInternalCodegenAPI
    public void setupEngine_xjal(Engine engine) {
        {{simulationClassName}} exp = new {{simulationClassName}}();
        exp.setupEngine(engine);
        exp.initDefaultRandomNumberGenerator(engine);
    }

    @AnyLogicInternalCodegenAPI
    public static void main(String[] args) {
        COMMAND_LINE_ARGUMENTS_xjal = args;
        Utilities.prepareBeforeExperimentStart_xjal(Training.class);
        Training ex = new Training((Object)null);
        ex.setCommandLineArguments_xjal(args);
        ex.run();
    }
}
{{/unless}}

class PolicyObservationFilter implements ObservationFilter {
    {{observationClassName}} in = null;

    // for some reason, the compiler fails if we try to use the name of inner classes more than once
    // so here we cast our objects using generics to work around this bug
    public static <V> V workAroundJavaBug(Object o) {
        return (V)o;
    }

    public double[] filter(Object object) {
        in = workAroundJavaBug(object);
        double[] out = null;

        {{{observationSnippet}}}

        return out;
    }

    {{#each setObs}}
    public void setObs_{{@index}}(double[] out) {
        {{{this}}}
    }
    {{/each}}
}
