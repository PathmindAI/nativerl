<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.7.7.202109242224" AlpVersion="8.7.2">
<Model>
	<Id>1563523926925</Id>
	<Name><![CDATA[PathmindPolicyHelper]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[pathmind.policyhelper]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Second]]></ModelTimeUnit>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1563523926930</Id>
			<Name><![CDATA[PathmindHelper]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import ai.skymind.nativerl.PolicyHelper;
import java.util.stream.DoubleStream;
import ai.skymind.nativerl.ServerPolicyHelper;
import ai.skymind.nativerl.exception.PathmindInvalidResponseException;]]></Import>
			<ExtendsReference>
				<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
				<ClassName><![CDATA[AbstractPathmindHelper]]></ClassName>
			</ExtendsReference>
			<StartupCode><![CDATA[PathmindHelperRegistry.register(this);

isTraining = Boolean.getBoolean("ai.skymind.nativerl.disablePolicyHelper");
disconnectFromAll();
if (isEnabled && policyHelper == null && !isTraining && usePolicy) {
	if (usePolicy) {    
		policyHelper = PathmindHelperRegistry.loadPolicy(policyFile);
		observationFilter = PathmindHelperRegistry.loadFilter(policyFile);
	} /* else {
		if (policyServer == null || policyServer.isEmpty()) {
			throw new RuntimeException("Policy Server URL cannot be blank.");
		}
		if (token == null || token.isEmpty()) {
			throw new RuntimeException("Policy Server token cannot be blank.");
		}
		
		policyHelper = new ServerPolicyHelper();	
	} */
}

if (numberOfAgents <= 0) {
	throw new RuntimeException("Number of Pathmind controlled agents must be greater than 0.");
}]]></StartupCode>
			<DestroyCode><![CDATA[PathmindHelperRegistry.unregister(this);]]></DestroyCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1563534160693</Id>
				<Name><![CDATA[1563534160693]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowchartBlock>true</FlowchartBlock>
			<Logging>false</Logging>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>false</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>false</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>false</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1563609600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1563523926927</Id>
				<Name><![CDATA[scale]]></Name>
				<ExcludeFromBuild>true</ExcludeFromBuild>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1566891812071</CurrentLevel>
			<ConnectionsId>1563523926926</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1563529489111</Id>
					<Name><![CDATA[policyHelper]]></Name>
					<X>50</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[PolicyHelper]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[null]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1566466833512</Id>
					<Name><![CDATA[isTraining]]></Name>
					<X>50</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1566467201295</Id>
					<Name><![CDATA[engine]]></Name>
					<X>50</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="private" StaticVariable="false">
						<Type><![CDATA[Engine]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[getEngine()]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1566468010477</Id>
					<Name><![CDATA[action]]></Name>
					<X>50</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[][]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double[numberOfAgents][]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1578425082743</Id>
					<Name><![CDATA[steps]]></Name>
					<X>50</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1563523942388</Id>
					<Name><![CDATA[isEnabled]]></Name>
					<X>50</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1563523942386</Id>
							<Label><![CDATA[Enabled]]></Label>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1579541084520</Id>
					<Name><![CDATA[debugMode]]></Name>
					<Description><![CDATA[<h3>Debug Mode</h3>
<p>Debug mode prints information that Pathmind receives to the AnyLogic console.  This is helpful for auditing data passed to the Pathmind Helper.</p>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/3631367-7-pathmind-helper-debug-mode" target="_blank">https://help.pathmind.com/en/articles/3631367-7-pathmind-helper-debug-mode</a>]]></Description>
					<X>50</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1579541084518</Id>
							<Label><![CDATA[Debug Mode]]></Label>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1566825558177</Id>
					<Name><![CDATA[usePolicy]]></Name>
					<Description><![CDATA[<h3>Mode</h3>
<p><b>Use Policy</b> will execute your simulation using the trained policy obtained from Pathmind. When <b>Use Policy</b> is selected, the Pathmind Helper will query the policy specified in <b>Policy File</b> to predict the next best action.</p>
<p><b>Use Random Actions</b> tells Pathmind to select actions at random. This option is used to confirm that your actions are set up correctly and to confirm that there are no logical issues in your AnyLogic simulation.</p>
]]></Description>
					<X>620</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1566825558175</Id>
							<Label><![CDATA[Mode]]></Label>
							<EditorContolType>RADIO_BUTTONS</EditorContolType>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1563523942388</ParameterId>
								<Operation>EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<PredefParamValue>
								<Id>0</Id>
								<Name><![CDATA[Use Policy]]></Name>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</PredefParamValue>
							<PredefParamValue>
								<Id>0</Id>
								<Name><![CDATA[Use Random Actions]]></Name>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</PredefParamValue>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1626371580469</Id>
					<Name><![CDATA[usePolicyFile]]></Name>
					<Description><![CDATA[<h3>Mode</h3>
<p><b>Use Policy</b> will execute your simulation using the trained policy obtained from Pathmind. When <b>Use Policy</b> is selected, the Pathmind Helper will query the policy specified in <b>Policy File</b> to predict the next best action.</p>
<p><b>Use Random Actions</b> tells Pathmind to select actions at random. This option is used to confirm that your actions are set up correctly and to confirm that there are no logical issues in your AnyLogic simulation.</p>
]]></Description>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>620</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1626371580467</Id>
							<Label><![CDATA[Policy Source]]></Label>
							<EditorContolType>RADIO_BUTTONS</EditorContolType>
							<HideCondition>
								<Id>1626371580464</Id>
								<ParameterId>1563523942388</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1566825558177</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<PredefParamValue>
								<Id>1626371580465</Id>
								<Name><![CDATA[Use Policy File]]></Name>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</PredefParamValue>
							<PredefParamValue>
								<Id>1626371580466</Id>
								<Name><![CDATA[Use Policy Server]]></Name>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</PredefParamValue>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1563524634306</Id>
					<Name><![CDATA[policyFile]]></Name>
					<X>620</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1563524634304</Id>
							<Label><![CDATA[Policy File]]></Label>
							<EditorContolType>FILE_CHOOSER</EditorContolType>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1563523942388</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1566825558177</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1626371580469</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1626372352837</Id>
					<Name><![CDATA[policyServer]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>620</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["PASTE_SERVER_URL"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1626372352835</Id>
							<Label><![CDATA[Policy Server URL]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<HideCondition>
								<Id>1626372352832</Id>
								<ParameterId>1563523942388</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>1626372352833</Id>
								<ParameterId>1566825558177</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>1626372352834</Id>
								<ParameterId>1626371580469</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1626824497381</Id>
					<Name><![CDATA[token]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>620</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["PASTE_TOKEN_HERE"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1626824497379</Id>
							<Label><![CDATA[Policy Server Token]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<HideCondition>
								<Id>1626824497376</Id>
								<ParameterId>1563523942388</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>1626824497377</Id>
								<ParameterId>1566825558177</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[true]]></Code>
								</Value>
							</HideCondition>
							<HideCondition>
								<Id>1626824497378</Id>
								<ParameterId>1626371580469</ParameterId>
								<Operation>NOT_EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1595822201340</Id>
					<Name><![CDATA[numberOfAgents]]></Name>
					<Description><![CDATA[<h3>Number of Controlled Agents</h3>
<p>Train multiple agents using a single shared policy.</p>

<b>Limitations</b>
<li>While there are no limitations, keep the number of agents under 100 if possible. Otherwise, you may exceed maximum memory allowed during Pathmind training.</li>
<li>The number of agents must be static. You cannot dynamically change the number of agents during the simulation.</li><br>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/4436169-15-using-multiple-agents" target="_blank">https://help.pathmind.com/en/articles/4436169-15-using-multiple-agents</a>]]></Description>
					<X>245</X><Y>109</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1595822201338</Id>
							<Label><![CDATA[Number of Controlled Agents]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>SEPARATE_SECTION</DelimeterType>
							<StartSection><![CDATA[Reinforcement Learning Values]]></StartSection>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1563523991195</Id>
					<Name><![CDATA[observations]]></Name>
					<Description><![CDATA[<h3>Observations</h3>
<p>Observations are information about the current state of the environment. The policy uses observations to make decisions about what actions to take.</p>

<b>Supported Types</b><br>
<li>Primitive types (int, long, float, double, boolean)</li>
<li>Arrays of primitive types (int[], long[], float[], double[], boolean[])</li>
<br>

<b>Example Code</b><br>
<code>
class Observations {<br>
&nbsp;&nbsp;double customers = customerCount;<br>
&nbsp;&nbsp;double[] stockLevels = getStockLevels();<br>
&nbsp;&nbsp;boolean surgePrices = surgeActive == 1;<br>
}
</code><br><br>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/3631436-2-build-observation-space" target="_blank">https://help.pathmind.com/en/articles/3631436-2-build-observation-space</a>
<a href="https://help.pathmind.com/en/articles/4436330-observation-selection" target="_blank">https://help.pathmind.com/en/articles/4436330-observation-selection</a>]]></Description>
					<X>245</X><Y>129</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="ACTION">
						<Type><![CDATA[double[]]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[class Observations {
    //double customers = customerCount;
    //double stockLevels[] = getStockLevels();
    //boolean surgePrices = surgeActive == 1;
}]]></Code>
						</DefaultValue>
						<MethodArgument>
							<Name><![CDATA[agentId]]></Name>
							<Type><![CDATA[int]]></Type>
						</MethodArgument>
						<ParameterEditor>
							<Id>1563523991193</Id>
							<Label><![CDATA[Observations]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1566471864343</Id>
					<Name><![CDATA[rewardVariables]]></Name>
					<Description><![CDATA[<h3>Metrics</h3>
<p>Simulation metrics are the building blocks for the reward function. They can embody important reward variables such as revenue and cost. These metrics are likely what you directly seek to optimize.</p>

<b>Supported Types</b><br>
<li>Primitive types (int, long, float, double, boolean)</li>
<li>Arrays of primitive types (int[], long[], float[], double[], boolean[])</li>
<br>

<b>Example Code</b><br>
<code>
class Metrics {<br>
&nbsp;&nbsp;double revenue = revenueVariable;<br>
&nbsp;&nbsp;boolean targetMet = targetMet == 1;<br>
}
</code><br><br>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/3640175-5-defining-metrics" target="_blank">https://help.pathmind.com/en/articles/3640175-5-defining-metrics</a><br>
<a href=https://help.pathmind.com/en/articles/4436328-defining-metric-names" target="_blank">https://help.pathmind.com/en/articles/4436328-defining-metric-names</a>]]></Description>
					<X>245</X><Y>149</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="ACTION">
						<Type><![CDATA[double[]]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[class Metrics {
    //double revenue = revenueVariable;
    //boolean cost = costVariable;
}]]></Code>
						</DefaultValue>
						<MethodArgument>
							<Name><![CDATA[agentId]]></Name>
							<Type><![CDATA[int]]></Type>
						</MethodArgument>
						<ParameterEditor>
							<Id>1566471864341</Id>
							<Label><![CDATA[Metrics]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
							<StartSection><![CDATA[Reinforcement Learning Values]]></StartSection>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1563524030804</Id>
					<Name><![CDATA[actions]]></Name>
					<Description><![CDATA[<h3>Actions</h3>
<p>Actions define all actions that an agent can perform. This can be in the form of discrete choices, a continuous range, or a mix of both.</p>

<b>Supported Action Spaces</b><br>
<li>Discrete</li>
<li>Continuous</li>
<li>Tuple</li>
<br>
<b>Annotations</b><br>
<li>@Discrete</li>
<li>@Continuous</li>
<br>

<b>Example Code</b><br>

<code>
class Actions {<br>
&nbsp;&nbsp;@Discrete(n = 2, size = 2) int[] action;<br>
&nbsp;&nbsp;void doIt() { doAction(action); }<br>
}
</code><br>

<code>
class Actions {<br>
&nbsp;&nbsp;@Continuous(low = 0, high = 1, shape = 1) double action;<br>
&nbsp;&nbsp;void doIt() { doAction(action); }<br>
}
</code><br>

<code>
class Actions {<br>
&nbsp;&nbsp;@Discrete(n = 2, size = 2) int[] action;<br>
&nbsp;&nbsp;@Continuous(low = 0, high = 1, shape = 1) double action2;<br>
&nbsp;&nbsp;void doIt() { doAction(action, action2); }<br>
}
</code><br>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/3640124-3-build-action-space" target="_blank">https://help.pathmind.com/en/articles/3640124-3-build-action-space</a><br>
<a href="https://help.pathmind.com/en/articles/4436529-12-continuous-action-spaces" target="_blank">https://help.pathmind.com/en/articles/4436529-12-continuous-action-spaces</a><br>
<a href="https://help.pathmind.com/en/articles/4436530-13-mixed-tuple-action-spaces" target="_blank">https://help.pathmind.com/en/articles/4436530-13-mixed-tuple-action-spaces</a><br>]]></Description>
					<X>245</X><Y>169</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="ACTION">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[class Actions {
    //@Discrete(n = 1, size = 2) int[] action;
    //@Continuous(low = 0, high = 1, shape = 1) float action;
    void doIt() { /* doAction(action); */ };
}]]></Code>
						</DefaultValue>
						<MethodArgument>
							<Name><![CDATA[agentId]]></Name>
							<Type><![CDATA[int]]></Type>
						</MethodArgument>
						<ParameterEditor>
							<Id>1563524030802</Id>
							<Label><![CDATA[Actions]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1595219001770</Id>
					<Name><![CDATA[actionMasks]]></Name>
					<Description><![CDATA[<h3>Action Masking</h3>

<b>Please note that a Pathmind subscription is required to use action masking.</b><br>

<p>An action mask allows you to tell the policy whether or not a selected action is valid at any given moment in time. By ignoring invalid actions, the policy can better filter out noise and useless information.</p>

<p>This field must return a boolean array in which each element in the array corresponds to the action in question.  False means mask the action because the action is invalid, true means do not mask because the action is valid.</p>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/4436170-14-action-masking" target="_blank">https://help.pathmind.com/en/articles/4436170-14-action-masking</a><br>]]></Description>
					<X>245</X><Y>189</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="ACTION">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[/* https://help.pathmind.com/en/articles/4436170-14-action-masking */
class ActionMasks {
    //boolean[] masks = {false, true};
}]]></Code>
						</DefaultValue>
						<MethodArgument>
							<Name><![CDATA[agentId]]></Name>
							<Type><![CDATA[int]]></Type>
						</MethodArgument>
						<ParameterEditor>
							<Id>1595219001768</Id>
							<Label><![CDATA[Action Masks]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1598081984891</Id>
					<Name><![CDATA[isSkipCondition]]></Name>
					<Description><![CDATA[<h3>Skip</h3>
<p>The skip condition allows you to skip certain agents if they do not meet certain criteria. This field must return <code>true</code> or <code>false</code> for each agent.</p>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/4436002-16-define-skip-condition" target="_blank">https://help.pathmind.com/en/articles/4436002-16-define-skip-condition</a>]]></Description>
					<X>245</X><Y>227</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="DYNAMIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false
/* http://help.pathmind.com/en/articles/4436002-define-skip-condition */]]></Code>
						</DefaultValue>
						<MethodArgument>
							<Name><![CDATA[agentId]]></Name>
							<Type><![CDATA[int]]></Type>
						</MethodArgument>
						<ParameterEditor>
							<Id>1598081984889</Id>
							<Label><![CDATA[Skip]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1595822201340</ParameterId>
								<Operation>EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[1]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1573849287879</Id>
					<Name><![CDATA[useEventTrigger]]></Name>
					<X>430</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1573849287877</Id>
							<Label><![CDATA[Use Pathmind Event Trigger]]></Label>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>SEPARATE_SECTION</DelimeterType>
							<StartSection><![CDATA[Event Trigger]]></StartSection>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1607719252648</Id>
					<Name><![CDATA[firstOccurrence]]></Name>
					<Description><![CDATA[<h3>First Occurrence</h3>
<p>Sets the time in which the first trigger should occur. By default, the first trigger event occurs at time 0.</p>]]></Description>
					<X>430</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[]]></Type>
						<UnitType><![CDATA[TIME]]></UnitType>
						<UnitOfValue Class="TimeUnits"><![CDATA[SECOND]]></UnitOfValue>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</DefaultValue>
						<ParameterEditor>
							<Id>1607719252646</Id>
							<Label><![CDATA[First Occurrence]]></Label>
							<EditorContolType>UNIT_EDITOR</EditorContolType>
							<HideCondition>
								<Id>1607719252645</Id>
								<ParameterId>1573849287879</ParameterId>
								<Operation>EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1573833451402</Id>
					<Name><![CDATA[recurrence]]></Name>
					<Description><![CDATA[<h3>Recurrence</h3>
<p>The frequency in which the event condition is checked. Once per second is the default but this should be updated depending on how your simulation works.</p>]]></Description>
					<X>430</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[]]></Type>
						<UnitType><![CDATA[TIME]]></UnitType>
						<UnitOfValue Class="TimeUnits"><![CDATA[SECOND]]></UnitOfValue>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</DefaultValue>
						<ParameterEditor>
							<Id>1573833451400</Id>
							<Label><![CDATA[Recurrence]]></Label>
							<EditorContolType>UNIT_EDITOR</EditorContolType>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1573849287879</ParameterId>
								<Operation>EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1573833780188</Id>
					<Name><![CDATA[eventCondition]]></Name>
					<Description><![CDATA[<h3>Event Condition</h3>
<p>The event trigger tells Pathmind when to trigger the next action. This field must return <code>true</code> or <code>false</code></p>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/articles/3634254-4-triggering-actions" target="_blank">https://help.pathmind.com/en/articles/3634254-4-triggering-actions</a>]]></Description>
					<X>430</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="DYNAMIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<UnitOfValue Class="TimeUnits"><![CDATA[SECOND]]></UnitOfValue>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true
/*
** Important **
https://help.pathmind.com/en/articles/3634254-4-triggering-actions
*/]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1573833780186</Id>
							<Label><![CDATA[Event Condition]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<HideCondition>
								<Id>0</Id>
								<ParameterId>1573849287879</ParameterId>
								<Operation>EQUALS</Operation>
								<Value Class="CodeValue">
									<Code><![CDATA[false]]></Code>
								</Value>
							</HideCondition>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1633463504388</Id>
					<Name><![CDATA[policyServing]]></Name>
					<Description><![CDATA[<h3>Policy Serving</h3>
<p>To integrate RL in real-world applications, please contact support@pathmind.com to discuss deployment options. Pathmind provides several tools to easily deploy an RL policy.</p>

<b>Learn More</b><br>
<a href="https://help.pathmind.com/en/collections/3129167-integrating-reinforcement-learning-policies-in-the-real-world-applications" target="_blank">https://help.pathmind.com/en/collections/3129167-integrating-reinforcement-learning-policies-in-the-real-world-applications</a>]]></Description>
					<X>620</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1633463504386</Id>
							<Label><![CDATA[Enable Policy Serving]]></Label>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>SEPARATE_SECTION</DelimeterType>
							<StartSection><![CDATA[Policy Serving]]></StartSection>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<Events>
				<Event>
					<Id>1573748399465</Id>
					<Name><![CDATA[internalEventTrigger]]></Name>
					<X>430</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1566892800000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[firstOccurrence(SECOND)]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[recurrence(SECOND)]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if (!useEventTrigger) {
	self.reset();
	return;
}

if (isEnabled && useEventTrigger && eventCondition()) {
	this.triggerNextAction();
}]]></Action>
				</Event>
			</Events>
			<DynamicEvents>
				<DynamicEventClass>
					<Id>1614025531741</Id>
					<Name><![CDATA[DE_executeStep]]></Name>
					<X>430</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Action><![CDATA[// calculate observations and rewards to catch errors and save actions
for (int i = 0; i < numberOfAgents; i++) {
	if (!isSkip(i)) {
		// Be sure to call those here allowing users to fix errors before training
		double[] training = observationForTrainingWithActionMask(i);
		double[] reward = observationForReward(i);
		// Throw error if infinity or NaN detected in observations or rewards array
		if (DoubleStream.of(training).anyMatch(x -> x == infinity || Double.isNaN(x))) {
			throw new RuntimeException("Invalid input. Observations cannot contain a value of infinity or NaN.");
		}
		if (DoubleStream.of(reward).anyMatch(x -> x == infinity || Double.isNaN(x))) {
			throw new RuntimeException("Invalid input. Reward cannot contain a value of infinity or NaN.");
		}
		
		if (usePolicy && policyHelper != null) {
			if (usePolicy) {
				action[i] = policyHelper.computeActions(training);
			} /* else {
				try {
					action[i] = policyHelper.computeActions(policyServer, token, observationJson());
				} catch (PathmindInvalidResponseException e) {
					e.printStackTrace();
					throw new RuntimeException(e.getMessage(), e);
				}
			} */
		} else if (!usePolicy) {
			action[i] = getActionRandom(getEngine().getDefaultRandomGenerator(), i);
		}
	}
}

// print debug
if(debugMode)
	printDebug();

// execute actions
for (int i = 0; i < numberOfAgents; i++) {
	if (!isSkip(i)) {
		
		if (usePolicy && policyHelper != null) {
			doAction(action[i], true, i);
		} else if (!usePolicy) {
			doAction(action[i], false, i);
		}
	}
}

steps++;]]></Action>
				</DynamicEventClass>
			</DynamicEvents>
			<Functions>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1566466772537</Id>
					<Name><![CDATA[triggerNextAction]]></Name>
					<Description><![CDATA[You may optionally trigger actions directly in your simulation. This could be triggered within a block, a state, an event, on startup of an agent, or anything else.]]></Description>
					<X>430</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// see if at least one agent is not skipped
boolean flag = true;
for (int i = 0; i < numberOfAgents; i++) 
	if (!isSkip(i)) {
		flag = false;
		break;
	}
// if all agents are skipped, dont take step
if(flag)
	return;

if (isTraining) {
	engine.pause(); // Unlock thread to allow PathmindEnvironment.java to execute
	steps++;
} else if (isEnabled) {	
	// Only check at step 1
	if (steps == 1) {
		if (observationForTraining(0).length == 0) {
			throw new RuntimeException("No observations detected.");
		}
		
		if (observationForReward(0).length == 0) {
			throw new RuntimeException("No metrics detected.");
		}
	}
	// Notify users if step count exceeds horizon set in NativeRL
	if (!usePolicy && steps > 20000) {
		throw new RuntimeException("Maximum steps exceeded.");
	}	
	create_DE_executeStep(0);
}
/*
if (!isTraining && steps == 1) {
    PathmindSerializer.writeMeta(this);
}
*/]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1604359131653</Id>
					<Name><![CDATA[isSkip]]></Name>
					<X>245</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[agentId]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[return isSkipCondition(agentId) && !isDone(agentId);]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[String]]></ReturnType>
					<Id>1605145082653</Id>
					<Name><![CDATA[printDebug]]></Name>
					<X>50</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[Color headerColor = new Color(240, 105, 0);
Color AgentIdColor = new Color(0, 0, 130);
try {
	if (!isTraining) {
		if (numberOfAgents == 1) {
			String header = "Pathmind:\n"
					      + "  Step: " + steps;
			traceln(headerColor, header);
			String[] observationNames = observationProcessor.getObservationNames(getOwner(), 0);
			double[] observationArray = observationForTraining(0);
			Map<String, Double> observationDict = new LinkedHashMap<String, Double>();
			for (int i = 0; i < observationArray.length; i++) {
  				observationDict.put(observationNames[i], observationArray[i]);
			}

			String[] rewardNames = rewardProcessor.getVariableNames(getOwner(), 0);
			double[] rewardArray = observationForReward(0);
			Map<String, Double> rewardDict = new LinkedHashMap<String, Double>();
			for (int i = 0; i < rewardArray.length; i++) {
  				rewardDict.put(rewardNames[i], rewardArray[i]);
			}

			String output = "  Observations:\n"
				    + "    Array: " + observationDict + "\n"
				    + "    Number of Observations: " + observationArray.length + "\n"
				    + "  Metrics: \n"
				    + "    Array: " + rewardDict + "\n"
				    + "    Number of Metrics: " + rewardArray.length + "\n"
				    + "  Last Action: " + Arrays.toString(action[0]) + "\n"
				    + "  Action Mask: " + Arrays.toString(actionMask(0));				    
			traceln(output);
		} else {
			String header = "Pathmind:\n"
					      + "  Step: " + steps;
			traceln(headerColor, header);
			for (int i = 0; i < numberOfAgents; i++) {
				if(!isSkip(i)){
					String[] observationNames = observationProcessor.getObservationNames(getOwner(), i);
					double[] observationArray = observationForTraining(i);
					Map<String, Double> observationDict = new LinkedHashMap<String, Double>();
					for (int j = 0; j < observationArray.length; j++) {
	  					observationDict.put(observationNames[j], observationArray[j]);
					}
	
					String[] rewardNames = rewardProcessor.getVariableNames(getOwner(), i);
					double[] rewardArray = observationForReward(i);
					Map<String, Double> rewardDict = new LinkedHashMap<String, Double>();
					for (int j = 0; j < rewardArray.length; j++) {
	  					rewardDict.put(rewardNames[j], rewardArray[j]);
					}
					
					traceln(AgentIdColor, "  Agent ID: " + i);
					String output_agentId = "    Observations:\n"
					    	+ "      Array: " + observationDict + "\n"
						    + "      Number of Observations: " + observationArray.length + "\n"
						    + "    Metrics: \n"
					    	+ "      Array: " + rewardDict + "\n"
						    + "      Number of Metrics: " + rewardArray.length + "\n"
						    + "    Last Action: " + Arrays.toString(action[i]) + "\n"
						    + "    Action Mask: " + Arrays.toString(actionMask(i));
						    //+ "    Skip: " + isSkip(i);
						    
					traceln(output_agentId);
				} else {
					traceln(silver, "  Agent ID: " + i + "    Skipped");
				}
				
			}
		}
	} else if (isDone(-1)) {
		// End debug string when done is true
	} else {
		// Hide debug string when training in Pathmind
	}
} catch (ReflectiveOperationException e) {
	e.printStackTrace();
	throw new RuntimeException("Could not generate debug string.", e);
}]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1563523926926</Id>
					<Name><![CDATA[connections]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentReferenceId>1563523926930</AgentReferenceId>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>


			<Presentation>
				<Level>
					<Id>1566891812071</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Image>
					<Id>1564400828815</Id>
					<Name><![CDATA[image]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>8</X><Y>8</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>true</EmbeddedIcon>
					<Z>0</Z>
					<Width>32</Width>
					<Height>32</Height>
					<Rotation>0.0</Rotation>
					<ImageFiles>
						<ImageResourceReference>
							<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
							<ClassName><![CDATA[pathmind-single-original.png]]></ClassName>
						</ImageResourceReference>
					</ImageFiles>
					<OriginalSize>false</OriginalSize>
				</Image>
				<Rectangle>
					<Id>1628197430821</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>410</X><Y>60</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>180</Width>
					<Height>230</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1628197445590</Id>
					<Name><![CDATA[text]]></Name>
					<X>420</X><Y>70</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Action Trigger]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1628197479932</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>30</X><Y>60</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>180</Width>
					<Height>230</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1628197479942</Id>
					<Name><![CDATA[text1]]></Name>
					<X>40</X><Y>70</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Settings]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1628197529841</Id>
					<Name><![CDATA[rectangle2]]></Name>
					<X>220</X><Y>60</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>180</Width>
					<Height>230</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1628197529843</Id>
					<Name><![CDATA[text2]]></Name>
					<X>230</X><Y>70</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[RL Values Fields]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1628197698906</Id>
					<Name><![CDATA[rectangle3]]></Name>
					<X>600</X><Y>60</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>180</Width>
					<Height>230</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1628197698925</Id>
					<Name><![CDATA[text3]]></Name>
					<X>610</X><Y>70</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Policy Serving]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>600</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1563523926930">
		<Id>1563523926934</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1563494400000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1566172800000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>1.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1563523926930">
			<Id>1563523926933</Id>
			<Name><![CDATA[Simulation]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>512</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1626821943955</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[PathmindPolicyHelper]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[debugMode]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[usePolicy]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[true]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[usePolicyFile]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[policyFile]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[policyServer]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[token]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[numberOfAgents]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[observations]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[rewardVariables]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[actions]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[actionMasks]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[isSkipCondition]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[false
/* http://help.pathmind.com/en/articles/4436002-define-skip-condition */]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[useEventTrigger]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[firstOccurrence]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[recurrence]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[eventCondition]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[isEnabled]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[policyServing]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[PathmindPolicyHelper : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1563494400000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1566172800000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>false</BypassInitialScreen>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1566473119411</Id>
			<Name><![CDATA[PathmindHelperRegistry]]></Name>
			<Text><![CDATA[import java.nio.file.Files;
import java.nio.file.Path;
import java.io.File;
import java.io.IOException;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Collections;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import ai.skymind.nativerl.PolicyHelper;
import ai.skymind.nativerl.ObservationFilter;

public class PathmindHelperRegistry {
    private static List<PathmindHelper> registeredHelpers = new ArrayList<PathmindHelper>();
    private static Map<String, PolicyHelper> policyCache = new HashMap<>();
    private static Map<String, ObservationFilter> filterCache = new HashMap<>();

    private static PolicyHelper forceLoadPolicy = null;
    private static String observationFilterClassName = null;

    public static void setForceLoadPolicy(PolicyHelper h) {
        forceLoadPolicy = h;
    }

    public static void setObservationFilterClassName(String s) {
        observationFilterClassName = s;
    }

    public static void register(PathmindHelper helper) {
        if (!registeredHelpers.contains(helper)) {
            registeredHelpers.add(helper);
            if (forceLoadPolicy != null) {
                helper.policyHelper = forceLoadPolicy;
            }
        }
    }

    public static void unregister(PathmindHelper helper) {
        registeredHelpers.remove(helper);
    }

    public static PathmindHelper getHelper() {
        if (registeredHelpers.size() == 0) {
            throw new IllegalStateException("No helper registered yet!");
        } else if (registeredHelpers.size() > 1) {
            throw new IllegalStateException("Too many registered helpers! Found: " + registeredHelpers.size());
        }
        return registeredHelpers.get(0);
    }

    public static List<PathmindHelper> getHelpers() {
        return registeredHelpers;
    }

    public static PolicyHelper loadPolicy(String policyFile) {
        AnyLogicCloudHelper.installLibrary();
        if (policyCache.containsKey(policyFile)) {
            return policyCache.get(policyFile);
        } else {
            if (!new File(policyFile).exists()) {
                throw new RuntimeException("Policy File doesn't Exist.");
            }
            try {
                if (new File(policyFile).isDirectory()) {
                    PolicyHelper helper = PolicyHelper.load(new File(policyFile));
                    ObservationFilter filter = ObservationFilter.load(new File(policyFile), observationFilterClassName);
                    policyCache.put(policyFile, helper);
                    filterCache.put(policyFile, filter);
                    return helper;
                }

                Path target = null;
                if (AnyLogicCloudHelper.isCloud()) {
                    File destDir = new File(System.getProperty("user.dir") + "/policy");
                    destDir.mkdir();

                    target = Files.createTempDirectory(destDir.toPath(), "pathmind-");
                } else {
                    target = Files.createTempDirectory("pathmind-");
                }
                target.toFile().deleteOnExit();

                ZipFile policyPackage = new ZipFile(policyFile);
                for (ZipEntry entry : Collections.list(policyPackage.entries())) {
                    Path targetFile = target.resolve(entry.getName());

                    targetFile.getParent().toFile().mkdirs();
                    if (!entry.isDirectory()) {
                        Files.copy(policyPackage.getInputStream(entry), targetFile);
                    }
                }

                policyPackage.close();

                PolicyHelper helper = PolicyHelper.load(target.toFile());
                ObservationFilter filter = ObservationFilter.load(target.toFile(), observationFilterClassName);
                policyCache.put(policyFile, helper);
                filterCache.put(policyFile, filter);
                return helper;
            } catch (UnsatisfiedLinkError e) {
                traceln(e);
                throw new RuntimeException("Cannot find the appropriate libraries.");
            } catch (IOException | ReflectiveOperationException e) {
                traceln(e);
                return null;
            }
        }

    }

    public static ObservationFilter loadFilter(String policyFile) {
        if (!filterCache.containsKey(policyFile)) {
            loadPolicy(policyFile);
        }
        return filterCache.get(policyFile);
    }
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1583369247650</Id>
			<Name><![CDATA[PathmindSerializer]]></Name>
			<ExcludeFromBuild>true</ExcludeFromBuild>
			<Text><![CDATA[/**
 * PathmindSerializer
 */
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.nio.charset.Charset;
import lombok.Getter;
import java.util.Optional;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.io.InputStream;
import org.apache.commons.io.IOUtils;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public class PathmindSerializer implements Serializable {

    /**
     * Default constructor
     */
    public PathmindSerializer() {
    }

	@Override
	public String toString() {
		return super.toString();
	}

	/**
	 * This number is here for model snapshot storing purpose<br>
	 * It needs to be changed when this class gets changed
	 */
	private static final long serialVersionUID = 1L;

    private static ObjectMapper objectMapper = new ObjectMapper();
	public static void writeMeta(PathmindHelper pathmindHelper) {
        try {
        	File f = new File("pathmind_meta.json");

            PathmindMeta meta = new PathmindMeta(pathmindHelper);
            FileUtils.write(f, objectMapper.writeValueAsString(meta), Charset.defaultCharset());
        } catch (Exception e) {
            e.printStackTrace();
        }
	}

	@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
	static class PathmindMeta {
		private int possibleActionCount;
		private int observationCount;
		private int rewardCount;
		private int actionTupleSize;
		private boolean isEnabled;
		private boolean autoRegressive;
		private boolean usePolicy;
		private String policyFile;
		private boolean useEventTrigger;
		private double recurrence;
		private boolean debugMode;
		private double startTime;
		private double stopTime;
		private String anyLogicVersion;
		private String pathmindHelperVersion;

		private static final String ENGINE_JAR = "com.anylogic.engine.jar";
		private static final String PATHMIND_JAR = "nativerl-policy";

		public PathmindMeta(PathmindHelper pathmindHelper) {
			this.possibleActionCount = pathmindHelper.possibleActionCount;
			this.observationCount = pathmindHelper.observationForTraining().length;
			this.rewardCount = pathmindHelper.observationForReward().length;
			this.isEnabled = pathmindHelper.isEnabled;
			//this.actionTupleSize = pathmindHelper.actionTupleSize;
			//this.autoRegressive = pathmindHelper.autoRegressive;
			this.usePolicy = pathmindHelper.usePolicy;
			this.policyFile = pathmindHelper.policyFile;
			this.useEventTrigger = pathmindHelper.useEventTrigger;
			this.recurrence = pathmindHelper.recurrence;
			this.debugMode = pathmindHelper.debugMode;
			this.startTime = pathmindHelper.getEngine().getStartTime();
			this.stopTime = pathmindHelper.getEngine().getStopTime();

			Optional<String> engineLib = Arrays.stream(System.getProperty("java.class.path").split(File.pathSeparator))
	                .filter(lib -> lib.endsWith(ENGINE_JAR))
	                .findAny();

			if (engineLib.isPresent()) {
				this.anyLogicVersion = anyLogicVersion(engineLib.get());
			}

			Optional<String> pathmindHelperLib = Arrays.stream(System.getProperty("java.class.path").split(File.pathSeparator))
					.filter(lib -> lib.endsWith(".jar") && lib.contains(PATHMIND_JAR))
					.findAny();

			if (pathmindHelperLib.isPresent()) {
				this.pathmindHelperVersion = pathmindHelperVersion(pathmindHelperLib.get());
			}
		}

		private static String anyLogicVersion(String libraryPath) {
	        try (JarFile jar = new JarFile(libraryPath)) {
	            JarEntry entry = jar.getJarEntry("com/anylogic/engine/Engine.properties");

	            if (entry != null) {
	                try (InputStream stream = jar.getInputStream(entry)) {
	                    //"version=8.5.2.202001241923" -> "8.5.2.202001241923"
	                    return IOUtils.toString(stream, Charset.defaultCharset()).replace("version=", "");
	                }
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return null;
	    }

		private static String pathmindHelperVersion(String libraryPath) {
	        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder builder = null;
	        try {
	            builder = factory.newDocumentBuilder();
	        } catch (ParserConfigurationException e) {
	            e.printStackTrace();
	            return null;
	        }

	        try (JarFile jar = new JarFile(libraryPath)) {
	            JarEntry entry = jar.getJarEntry("library.xml");

	            if (entry != null) {
	                try (InputStream stream = jar.getInputStream(entry)) {
	                    Document doc = builder.parse(stream);
	                    doc.getDocumentElement();
	                    String major = doc.getElementsByTagName("VersionMajor").item(0).getTextContent();
	                    String minor = doc.getElementsByTagName("VersionMinor").item(0).getTextContent();
	                    String build = doc.getElementsByTagName("VersionBuild").item(0).getTextContent();

	                    return String.join(".", major, minor, build);
	                }
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return null;
	    }
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1593470224518</Id>
			<Name><![CDATA[AnyLogicCloudHelper]]></Name>
			<Text><![CDATA[import java.security.Permission;

import org.bytedeco.javacpp.Loader;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import ai.skymind.nativerl.PolicyHelper;

public class AnyLogicCloudHelper {

    private static class MySecurityManager extends SecurityManager {
        @Override
        public void checkPermission(Permission perm) {
            return;
        }
    }

    private static final String LIB_STDCPP_URL = "https://s3.amazonaws.com/public-pathmind.com/libstdc%2B%2B6-6.4.0-r9.apk";
    private static final String LIB_STDCPP = "libstdc++6-6.4.0-r9.apk";
	private static Boolean isCloud = null;

    static {
        isCloud = new File(".").getAbsolutePath().startsWith("/run/executor/disk") ? Boolean.TRUE : Boolean.FALSE;

        if (isCloud) {
            SecurityManager sm = new MySecurityManager();
            System.setSecurityManager(sm);
        }
    }

	public static boolean isCloud() {
		return isCloud;
	}

    private static void exec(String[] cmd) {
        try {
            Process p = Runtime.getRuntime().exec(cmd);
            java.io.BufferedReader bri = new java.io.BufferedReader(new java.io.InputStreamReader(
                    p.getInputStream()));
            String line = "";
            while ((line = bri.readLine()) != null) {
                System.out.println(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void installLibrary() {
        // check if this code is being executed on anylogic cloud
        if (!isCloud) {
            return;
        }

        // make sure to have libstdc++
        File stdcppFile = new File(LIB_STDCPP);
        if (!stdcppFile.exists()) {
            try {
                File file = Loader.extractResource(new URL(LIB_STDCPP_URL), stdcppFile, null, null);
            } catch (IOException e) {
                traceln(e);
            }
        }

        // untar libstdc++6 since default AnyLogic cloud instance(Alpine) doesn't have this library
        String[] cmd = {
                "/bin/sh", "-c", "tar -xzf " + LIB_STDCPP};
        exec(cmd);

        File libstdcPath = new File("./usr/lib/gcc/x86_64-alpine-linux-musl/6.4.0");

        // create a directory for javacpp cache
        File javacppPath = new File(System.getProperty("user.dir") + "/.javacpp/cache");
        javacppPath.mkdirs();
        javacppPath.setExecutable(true, false);

        // extract the proper jar file name
        Class klass = PolicyHelper.class;
        File jarFile = new File(klass.getProtectionDomain().getCodeSource().getLocation().getFile());

        //File dest = new File(javacppPath, jarFile.getName() + "/org/bytedeco/tensorflow/linux-x86_64");
        File dest = new File(javacppPath, jarFile.getName() + "/org/tensorflow/internal/c_api/linux-x86_64");
        dest.mkdirs();

        // copy libstdc++ so files to javacpp cache due to ld.library.path
        String[] cmd1 = {
                "/bin/sh", "-c", "cp " + libstdcPath.getAbsolutePath() + "/* " + dest.getAbsolutePath()};
        exec(cmd1);

    }




}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1594627713365</Id>
			<Name><![CDATA[AbstractPathmindHelper]]></Name>
			<Text><![CDATA[import ai.skymind.nativerl.ActionProcessor;
import ai.skymind.nativerl.ActionMaskProcessor;
import ai.skymind.nativerl.AnnotationProcessor;
import ai.skymind.nativerl.ObservationFilter;
import ai.skymind.nativerl.ObservationProcessor;
import ai.skymind.nativerl.RewardProcessor;

public class AbstractPathmindHelper extends Agent {
	protected ActionProcessor actionProcessor;
	protected ActionMaskProcessor actionMaskProcessor;
	protected ObservationFilter observationFilter;
	protected ObservationProcessor observationProcessor;
	protected RewardProcessor rewardProcessor;

	protected int possibleActionCount;
	protected int actionTupleSize;
	
	private boolean actionMaskLengthVerified = false;

	public AbstractPathmindHelper() {
	}

	public AbstractPathmindHelper(Engine engine, Agent owner, AgentList ownerPopulation) {
		super(engine, owner, ownerPopulation);
		init();
	}

	void init() {
		try {
			PathmindHelperRegistry.setObservationFilterClassName(getOwner().getClass().getPackage().getName() + "." + ObservationFilter.POLICY_CLASS_NAME);

			actionProcessor = new ActionProcessor(getOwner().getClass());
			try {
				actionMaskProcessor = new ActionMaskProcessor(getOwner().getClass());
			} catch (ClassNotFoundException e) {
				actionMaskProcessor = null;
			}
			
			observationProcessor = new ObservationProcessor(getOwner().getClass());
			rewardProcessor = new RewardProcessor(getOwner().getClass());

			possibleActionCount = 0;
			actionTupleSize = 0;
			AnnotationProcessor[] actionSpaces = actionProcessor.getActionSpaces();
			for (int i = 0; i < actionSpaces.length; i++) {
				if (actionSpaces[i].discrete) {
					AnnotationProcessor d = actionSpaces[i];
					possibleActionCount += (int)d.n * (int)d.size;
					actionTupleSize += (int)d.size;
				} else if (actionSpaces[i].continuous) {
					AnnotationProcessor c = actionSpaces[i];
					// nothing to do for now
				}
			}
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not create NativeRL processors.", e);
		}
	}

	public void doAction(long... actions) {
		doAction(actions, 0);
	}
	public void doAction(long[] actions, int agentId) {
		double[] a = new double[actions.length];
		for (int i = 0; i < actions.length; i++) {
			a[i] = actions[i];
		}
		doAction(a, false, agentId);
	}

	public double[] doAction(double... actions) {
		return doAction(actions, false, 0);
	}
	public double[] doAction(double[] actions, boolean scale, int agentId) {
		try {
			if (actionProcessor == null) {
				init();
			}
			return actionProcessor.doActions(getOwner(), actions, scale, agentId);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not do actions.", e);
		}
	}

	public double[] getActionRandom(Random random) {
		return getActionRandom(random, 0);
	}
	public double[] getActionRandom(Random random, int agentId) {
		try {
			if (actionProcessor == null) {
				init();
			}
			return actionProcessor.getActions(getOwner(), random, agentId);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get random actions.", e);
		}
	}

	public boolean[] actionMask() {
		return actionMask(0);
	}
	public boolean[] actionMask(int agentId) {
		try {
			if (observationProcessor == null) {
				init();
			}
			boolean[] actMasks = actionMaskProcessor != null ? actionMaskProcessor.getActionMasks(getOwner(), agentId) : null;
			if (actMasks != null && actMasks.length > 0 && isAllFalse(actMasks)) {
				System.out.println("WARNING: Action masks should not be all false. \n");
				//throw new RuntimeException("Action masks should not be all false. \n");
			}
			if (!actionMaskLengthVerified) {
				if (actionMaskProcessor != null && actMasks.length > 0 && possibleActionCount != actMasks.length) {
					throw new RuntimeException("The length of Action Mask is not equal to the number of possible actions : " 
									+ actMasks.length + " != " +  possibleActionCount + "\n");
				}
				actionMaskLengthVerified = true;
			}
			return actMasks;
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get action masks.", e);
		}
	}
	private boolean isAllFalse(boolean[] array) {
		for (boolean b : array) if (b) return false;
		return true;
	}

	public double[] observationForTraining() {
		return observationForTraining(0);
	}
	public double[] observationForTraining(int agentId) {
		return observationToDoubles(getObservationObject(agentId));
	}
	public double[] observationForTrainingWithActionMask(int agentId) {
		double[] observations = observationForTraining(agentId);
		if (actionMaskProcessor == null) {
			return observations;
		} else {
			boolean[] actMasks = actionMask(agentId);
			double[] concat = new double[actMasks.length + observations.length];

			int k = 0;
			for (boolean actMask : actMasks) {
				concat[k++] = actMask ? 1.0 : 0.0;
			}
			for (double obs : observations) {
				concat[k++] = obs;
			}
			return concat;
		}
	}
	public <O> O getObservationObject(int agentId) {
		try {
			if (observationProcessor == null) {
				init();
			}
			return observationProcessor.getObservationObject(getOwner(), agentId);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get observations.", e);
		}
	}
	public <O> double[] observationToDoubles(O observationObject) {
		try {
			return observationFilter != null ? observationFilter.filter(observationObject) : observationProcessor.toDoubles(observationObject);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get observation doubles.", e);
		}
	}
	
	public String observationJson() {
		return observationJson(0);
	}
	
	public String observationJson(int agentId) {
		try {
			return observationProcessor.toJsonString(getObservationObject(agentId), actionMask(agentId));
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get observation json.", e);
		}
	}

	public double[] observationForReward() {
		return observationForReward(0);
	}
	public String[] getObservationNames() {
		try {
			if (observationProcessor == null) {
				init();
			}
			return observationProcessor.getObservationNames(getOwner(), 0);
		} catch (ReflectiveOperationException e) {
			throw new RuntimeException("Could not get observations names: " + e);
		}
	}
    public String[] getObservationTypes() {
        try {
            if (observationProcessor == null) {
                init();
            }
            return observationProcessor.getObservationTypes(getOwner(), 0);
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException("Could not get observations types: " + e);
        }
    }
	public double[] observationForReward(int agentId) {
		return rewardToDoubles(getRewardObject(agentId));
	}
	public int getPossibleActionCount() {
		return possibleActionCount;
	}
	public String[] getRewardVariableNames() {
		try {
			if (rewardProcessor == null) {
				init();
			}
			return rewardProcessor.getVariableNames(getOwner(), 0);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get reward variables names.", e);
		}
	}
    public String[] getRewardVariableTypes() {
        try {
            if (rewardProcessor == null) {
                init();
            }
            return rewardProcessor.getVariableTypes(getOwner(), 0);
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
            throw new RuntimeException("Could not get reward variables types.", e);
        }
    }
	public <V> V getRewardObject(int agentId) {
		try {
			if (rewardProcessor == null) {
				init();
			}
			return rewardProcessor.getRewardObject(getOwner(), agentId);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get reward variables.", e);
		}
	}
	public <V> double[] rewardToDoubles(V rewardObject) {
		try {
			return rewardProcessor.toDoubles(rewardObject);
		} catch (ReflectiveOperationException e) {
			e.printStackTrace();
			throw new RuntimeException("Could not get reward doubles.", e);
		}
	}

	public boolean isDone(int agentId) {
		return getEngine().getState() == Engine.State.FINISHED;
	}
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1595898342752</Id>
			<Name><![CDATA[Discrete]]></Name>
			<Text><![CDATA[import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD})
public @interface Discrete {
    long n();
    long size() default 1;
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1595906228984</Id>
			<Name><![CDATA[Continuous]]></Name>
			<Text><![CDATA[import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD})
public @interface Continuous {
    double[] low();
    double[] high();
    long[] shape();
}]]></Text>
		</JavaClass>
	</JavaClasses>
	<Libraries>
		<!--   =========   Library   ========  -->
		<Library>
			<Id>1563529858312</Id>
			<Name><![CDATA[Pathmind]]></Name>
			<Description><![CDATA[Apply Reinforcement Learning to AnyLogic Simulations]]></Description>
			<AOCEntry>
				<ActiveObjectClassId>1563523926930</ActiveObjectClassId>
				<Icon16ResourceReference>
					<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
					<ClassName><![CDATA[Assets/pathmind-single-16x16.png]]></ClassName>
				</Icon16ResourceReference>
				<Icon32ResourceReference>
					<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
					<ClassName><![CDATA[Assets/pathmind-single-32x32.png]]></ClassName>
				</Icon32ResourceReference>
			</AOCEntry>

			<IconResourceReference>
				<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
				<ClassName><![CDATA[Assets/pathmind-single-16x16.png]]></ClassName>
			</IconResourceReference>
			<VersionMajor>1</VersionMajor>
			<VersionMinor>7</VersionMinor>
			<VersionBuild>0</VersionBuild>
			<Provider><![CDATA[Pathmind Inc.]]></Provider>    
		</Library>
	</Libraries>
	<ModelResources>
		<Resource>
			<Path><![CDATA[Assets/pathmind-single-16x16.png]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Assets/pathmind-single-32x32.png]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[pathmind-single-original.png]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[nativerl-policy-1.7.0-SNAPSHOT.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[pathmind.policyhelper]]></PackageName>
			<ClassName><![CDATA[nativerl-policy-1.7.0-SNAPSHOT.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>